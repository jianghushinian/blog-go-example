apiVersion: v1
kind: Namespace
metadata:
  name: mcp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcp-gateway
  namespace: mcp
  labels:
    app: mcp-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mcp-gateway
  template:
    metadata:
      name: mcp-gateway
      labels:
        app: mcp-gateway
    spec:
      containers:
        - name: mcp-gateway
          image: registry.ap-southeast-1.aliyuncs.com/mcp-ecosystem/mcp-gateway-allinone:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80   # Web 界面端口
            - containerPort: 5234 # API Server 端口
            - containerPort: 5235 # MCP Gateway 端口
            - containerPort: 5335 # MCP Gateway 管理端口（承载诸如 reload 的内部接口，生产环境切勿对外）
            - containerPort: 5236 # Mock User Service 端口
          env:
            - name: ENV
              value: production
            - name: OPENAI_BASE_URL
              value: https://dashscope.aliyuncs.com/compatible-mode/v1
            - name: OPENAI_API_KEY
              value: sk-xxx
            - name: OPENAI_MODEL
              value: qwen-turbo
          volumeMounts:
            - mountPath: /app/configs # 配置文件目录
              name: config-volume
            - mountPath: /app/data # 数据目录
              name: data-volume
            - mountPath: /app/.env
              name: env-volume
      restartPolicy: Always
      volumes:
        - name: config-volume
          configMap:
            name: mcp-config
        - name: env-volume
          configMap:
            name: mcp-env
        - name: data-volume
          persistentVolumeClaim:
            claimName: mcp-storage
---
apiVersion: v1
kind: Service
metadata:
  name: mcp-gateway-web
  namespace: mcp
spec:
  type: NodePort
  selector:
    app: mcp-gateway
  ports:
    - name: web
      port: 80
      targetPort: 80
      nodePort: 30080  # 映射到宿主机 30080 端口
    - name: api-server
      port: 5234
      targetPort: 5234
      nodePort: 30081
    - name: mcp-gateway
      port: 5235
      targetPort: 5235
      nodePort: 30082
    - name: mock-user
      port: 5236
      targetPort: 5236
      nodePort: 30083
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mcp-config
  namespace: mcp
data:
  mcp-gateway.yaml: |
    port: ${MCP_GATEWAY_PORT:5235}
    pid: "${MCP_GATEWAY_PID:/var/run/mcp-gateway.pid}"
    
    # Logger configuration
    logger:
      level: "${LOGGER_LEVEL:info}"                                           # debug, info, warn, error
      format: "${LOGGER_FORMAT:json}"                                         # json, console
      output: "${LOGGER_OUTPUT:stdout}"                                       # stdout, file
      file_path: "${LOGGER_FILE_PATH:/var/log/mcp-gateway/mcp-gateway.log}"   # path to log file when output is file
      max_size: ${LOGGER_MAX_SIZE:100}                                        # max size of log file in MB
      max_backups: ${LOGGER_MAX_BACKUPS:3}                                    # max number of backup files
      max_age: ${LOGGER_MAX_AGE:7}                                            # max age of backup files in days
      compress: ${LOGGER_COMPRESS:true}                                       # whether to compress backup files
      color: ${LOGGER_COLOR:false}                                            # whether to use color in console output
      stacktrace: ${LOGGER_STACKTRACE:true}                                   # whether to include stacktrace in error logs
    
    # Storage configuration
    storage:
      type: "${GATEWAY_STORAGE_TYPE:db}"  # disk or db
      # Database configuration (only used when type is db)
      database:
        type: "${GATEWAY_DB_TYPE:sqlite}"
        host: "${GATEWAY_DB_HOST:localhost}"
        port: ${GATEWAY_DB_PORT:5432}
        user: "${GATEWAY_DB_USER:postgres}"
        password: "${GATEWAY_DB_PASSWORD:example}"
        dbname: "${GATEWAY_DB_NAME:./data/mcp-gateway.db}"
        sslmode: "${GATEWAY_DB_SSL_MODE:disable}"
      # Disk configuration (only used when type is disk)
      disk:
        path: "${GATEWAY_STORAGE_DISK_PATH:}"
      api:
        url: "${GATEWAY_STORAGE_API_URL:}"
        configJSONPath: "${GATEWAY_STORAGE_API_CONFIG_JSON_PATH:}"
        timeout: "${GATEWAY_STORAGE_API_TIMEOUT:30s}"
    
    # Notifier configuration
    notifier:
      role: "${NOTIFIER_ROLE:receiver}"
      # Type of notifier to use (signal, api, redis, composite(includes signal n api as default))
      type: "${NOTIFIER_TYPE:signal}"
      
      # Signal configuration (only used when type is signal)
      signal:
        signal: "${NOTIFIER_SIGNAL:SIGHUP}"
        pid: "${NOTIFIER_SIGNAL_PID:/var/run/mcp-gateway.pid}"
      
      # API configuration (only used when type is api)
      api:
        port: ${NOTIFIER_API_PORT:5235}
        target_url: "${NOTIFIER_API_TARGET_URL:http://localhost:5235/_reload}"
      
      # Redis configuration (only used when type is redis)
      redis:
        addr: "${NOTIFIER_REDIS_ADDR:localhost:6379}"
        password: "${NOTIFIER_REDIS_PASSWORD:UseStrongPasswordIsAGoodPractice}"
        db: ${NOTIFIER_REDIS_DB:0}
        topic: "${NOTIFIER_REDIS_TOPIC:mcp-gateway:reload}"
    
    # Session storage configuration
    session:
      type: "${SESSION_STORAGE_TYPE:memory}"  # memory or redis
      redis:
        addr: "${SESSION_REDIS_ADDR:localhost:6379}"
        password: "${SESSION_REDIS_PASSWORD:}"
        db: ${SESSION_REDIS_DB:0}
        topic: "${SESSION_REDIS_TOPIC:mcp-gateway:session}"
  apiserver.yaml: |
    # Logger configuration
    logger:
      level: "${APISERVER_LOGGER_LEVEL:info}"                                         # debug, info, warn, error
      format: "${APISERVER_LOGGER_FORMAT:console}"                                    # json, console
      output: "${APISERVER_LOGGER_OUTPUT:stdout}"                                     # stdout, file
      file_path: "${APISERVER_LOGGER_FILE_PATH:/var/log/mcp-gateway/apiserver.log}"   # path to log file when output is file
      max_size: ${APISERVER_LOGGER_MAX_SIZE:100}                                      # max size of log file in MB
      max_backups: ${APISERVER_LOGGER_MAX_BACKUPS:3}                                  # max number of backup files
      max_age: ${APISERVER_LOGGER_MAX_AGE:7}                                          # max age of backup files in days
      compress: ${APISERVER_LOGGER_COMPRESS:true}                                     # whether to compress backup files
      color: ${APISERVER_LOGGER_COLOR:true}                                           # whether to use color in console output
      stacktrace: ${APISERVER_LOGGER_STACKTRACE:true}                                 # whether to include stacktrace in error logs
    
    # Super admin configuration
    super_admin:
      username: "${SUPER_ADMIN_USERNAME:admin}"
      password: "${SUPER_ADMIN_PASSWORD:admin}"
    
    database:
      type: "${APISERVER_DB_TYPE:sqlite}"
      host: "${APISERVER_DB_HOST:localhost}"
      port: ${APISERVER_DB_PORT:5432}
      user: "${APISERVER_DB_USER:postgres}"
      password: "${APISERVER_DB_PASSWORD:example}"
      dbname: "${APISERVER_DB_NAME:./mcp-gateway.db}"
      sslmode: "${APISERVER_DB_SSL_MODE:disable}"
    
    # Storage configuration
    storage:
      type: "${GATEWAY_STORAGE_TYPE:db}"  # disk or db
      # Database configuration (only used when type is db)
      database:
        type: "${GATEWAY_DB_TYPE:sqlite}"
        host: "${GATEWAY_DB_HOST:localhost}"
        port: ${GATEWAY_DB_PORT:5432}
        user: "${GATEWAY_DB_USER:postgres}"
        password: "${GATEWAY_DB_PASSWORD:example}"
        dbname: "${GATEWAY_DB_NAME:./data/mcp-gateway.db}"
        sslmode: "${GATEWAY_DB_SSL_MODE:disable}"
      # Disk configuration (only used when type is disk)
      disk:
        path: "${GATEWAY_STORAGE_DISK_PATH:}"
    
    # Notifier configuration
    notifier:
      role: "${APISERVER_NOTIFIER_ROLE:sender}"
      # Type of notifier to use (signal, api, redis, composite)
      type: "${APISERVER_NOTIFIER_TYPE:signal}"
      
      # Signal configuration (only used when type is signal)
      signal:
        signal: "${APISERVER_NOTIFIER_SIGNAL:SIGHUP}"
        pid: "${APISERVER_NOTIFIER_SIGNAL_PID:/var/run/mcp-gateway.pid}"
      
      # API configuration (only used when type is api)
      api:
        port: ${APISERVER_NOTIFIER_API_PORT:5235}
        target_url: "${APISERVER_NOTIFIER_API_TARGET_URL:http://localhost:5235/_reload}"
      
      # Redis configuration (only used when type is redis)
      redis:
        addr: "${APISERVER_NOTIFIER_REDIS_ADDR:localhost:6379}"
        password: "${APISERVER_NOTIFIER_REDIS_PASSWORD:UseStrongPasswordIsAGoodPractice}"
        db: ${APISERVER_NOTIFIER_REDIS_DB:0}
        topic: "${APISERVER_NOTIFIER_REDIS_TOPIC:mcp-gateway:reload}"
    
    openai:
      api_key: "${OPENAI_API_KEY}"
      model: "${OPENAI_MODEL:gpt-4.1}"
      base_url: "${OPENAI_BASE_URL:https://api.openai.com/v1/}"
    
    # JWT configuration
    jwt:
      secret_key: "${APISERVER_JWT_SECRET_KEY:Pls-Change-Me!}"  # Change this in production
      duration: "${APISERVER_JWT_DURATION:24h}"                  # Token duration
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mcp-env
  namespace: mcp
data:
  .env.allinone: |
    # Logger configuration for apiserver
    APISERVER_LOGGER_LEVEL=info
    APISERVER_LOGGER_FORMAT=json
    APISERVER_LOGGER_OUTPUT=stdout
    APISERVER_LOGGER_FILE_PATH=/var/log/mcp-gateway/apiserver.log
    APISERVER_LOGGER_MAX_SIZE=100
    APISERVER_LOGGER_MAX_BACKUPS=3
    APISERVER_LOGGER_MAX_AGE=7
    APISERVER_LOGGER_COMPRESS=true
    APISERVER_LOGGER_COLOR=false
    APISERVER_LOGGER_STACKTRACE=true
    
    # Logger configuration for mcp-gateway
    LOGGER_LEVEL=info
    LOGGER_FORMAT=json
    LOGGER_OUTPUT=stdout
    LOGGER_FILE_PATH=/var/log/mcp-gateway/mcp-gateway.log
    LOGGER_MAX_SIZE=100
    LOGGER_MAX_BACKUPS=3
    LOGGER_MAX_AGE=7
    LOGGER_COMPRESS=true
    LOGGER_COLOR=false
    LOGGER_STACKTRACE=true
    
    # Database Configuration
    APISERVER_DB_TYPE=sqlite
    APISERVER_DB_HOST=localhost
    APISERVER_DB_PORT=5432
    APISERVER_DB_USER=
    APISERVER_DB_PASSWORD=
    APISERVER_DB_NAME=./data/mcp-gateway.db
    APISERVER_DB_SSL_MODE=disable
    
    # Gateway Configurations Storage Configuration
    GATEWAY_STORAGE_TYPE=db
    GATEWAY_DB_TYPE=sqlite
    GATEWAY_DB_HOST=localhost
    GATEWAY_DB_PORT=5432
    GATEWAY_DB_USER=
    GATEWAY_DB_PASSWORD=
    GATEWAY_DB_NAME=./data/mcp-gateway.db
    GATEWAY_DB_SSL_MODE=disable
    GATEWAY_STORAGE_DISK_PATH=
    GATEWAY_STORAGE_API_URL=
    GATEWAY_STORAGE_API_CONFIG_JSON_PATH=
    GATEWAY_STORAGE_API_TIMEOUT=5
    
    # Notifier Configuration
    APISERVER_NOTIFIER_ROLE=sender
    APISERVER_NOTIFIER_TYPE=signal
    ## Signal Notifier Settings
    APISERVER_NOTIFIER_SIGNAL=SIGHUP
    APISERVER_NOTIFIER_SIGNAL_PID=/var/run/mcp-gateway.pid
    ## API Notifier Settings
    APISERVER_NOTIFIER_API_PORT=5235
    APISERVER_NOTIFIER_API_TARGET_URL=http://localhost:5235/_reload
    ## Redis Notifier Settings
    APISERVER_NOTIFIER_REDIS_ADDR=localhost:6379
    APISERVER_NOTIFIER_REDIS_PASSWORD=UseStrongPasswordIsAGoodPractice
    APISERVER_NOTIFIER_REDIS_DB=0
    APISERVER_NOTIFIER_REDIS_TOPIC=mcp-gateway:reload
    
    # Notifier Configuration
    NOTIFIER_ROLE=receiver
    NOTIFIER_TYPE=signal
    ## Signal Notifier Settings
    NOTIFIER_SIGNAL=SIGHUP
    NOTIFIER_SIGNAL_PID=/var/run/mcp-gateway.pid
    ## API Notifier Settings
    NOTIFIER_API_PORT=5235
    NOTIFIER_API_TARGET_URL=http://localhost:5235/_reload
    ## Redis Notifier Settings
    NOTIFIER_REDIS_ADDR=localhost:6379
    NOTIFIER_REDIS_PASSWORD=UseStrongPasswordIsAGoodPractice
    NOTIFIER_REDIS_DB=0
    NOTIFIER_REDIS_TOPIC=mcp-gateway:reload
    
    # Session storage type: memory or redis
    SESSION_STORAGE_TYPE=memory
    SESSION_REDIS_ADDR=localhost:6379
    SESSION_REDIS_PASSWORD=
    SESSION_REDIS_DB=0
    SESSION_REDIS_TOPIC=mcp-gateway:session
    
    OPENAI_BASE_URL=
    OPENAI_API_KEY=
    OPENAI_MODEL=gpt-4.1
    
    MCP_GATEWAY_PID=/var/run/mcp-gateway.pid
    MCP_GATEWAY_PORT=5235
    
    VITE_API_BASE_URL=/api
    VITE_WS_BASE_URL=/ws
    VITE_MCP_GATEWAY_BASE_URL=/mcp
    VITE_BASE_URL=/
    
    APISERVER_JWT_SECRET_KEY=fec6d38f73d4211318e7c85617f0e333PlsChangeMe
    APISERVER_JWT_DURATION=24h
    
    TZ=UTC
    
    SUPER_ADMIN_USERNAME=admin
    SUPER_ADMIN_PASSWORD=297df52fbc321ebf7198d497fe1c9206PlsChangeMe
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mcp-storage
  namespace: mcp
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 8Gi
  storageClassName: standard
